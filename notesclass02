*****************TestNG class02**************
What Is TestNG.Xml?
TestNG.xml file is a configuration file that helps in organizing our tests.
It allows testers to create and handle multiple test classes, define test suites and tests.

It makes a tester’s job easier by controlling the execution of
 tests by putting all the test cases together and run it under one XML file.
  This is a beautiful concept, without which, it is difficult to work in TestNG.

Advantages Of TestNG.xml
Major advantages of TestNG.xml file are:

It provides parallel execution of test methods.
It allows the dependency of one test method on another test method.
It helps in prioritizing our test methods.
It allows grouping of test methods into test groups.
It supports the parameterization of test cases using @Parameters annotation.
It helps in Data-driven testing using @DataProvider annotation.
It has different types of assertions that help in validating the expected results with the actual results.
It has different types of HTML reports, Extent reports, etc. for a better and clear understanding of our test summary.
It has listeners who help in creating logs.

Concepts Used In TestNG.xml
#1) A Suite is represented by one XML file. It can contain one or more tests and is defined by the <suite> tag.

Example: <suite name=”Testing Google Apps”>

#2) A Test is represented by <test> and can contain one or more TestNG classes.

Example: <test name=”Regression”>

#3) A Class is a Java class that contains TestNG annotations. Here it is represented by the <class> tag and can contain one or more test methods.

testNg XML:
 gives u control over the execution of your whole project!!!!!!

<suite>
	<test>

		<classes>
			<class>

				<method>
				     <include =" method name"/>
				</method>
			</class>
		</classes>



		<packages>

		<packages>

	</test>
</suite>



1.Class wise execution
you can control which class u want to execute using xml , u can execute multiple classes also
e.g
for one class
<suite name="All Test Suite">
    <test verbose="2" preserve-order="true" name="C:/Users/moazzam/Desktop/testNGbatch12new/TestNGBasicsBatch12">
      <classes>
          <class name="class01.BasicAnnotations"></class>

      </classes>
    </test>
</suite>

for two classes
<suite name="All Test Suite">
    <test verbose="2" preserve-order="true" name="C:/Users/moazzam/Desktop/testNGbatch12new/TestNGBasicsBatch12">
      <classes>
          <class name="class01.Priorities"></class>
           <class name="class01.DependsOn"></class>
      </classes>
    </test>
</suite>





2.Mehtod wise execution
you can control which method in a particular class to execute and which not to by using xml in testng
e.g:
<suite name="All Test Suite">
    <test verbose="2" preserve-order="true" name="test">
       <classes>
           <class name="class01.BasicAnnotations">
               <methods>
                   <include name="bthirdTest"/>
                   <exclude name="cfourthTest"/>
               </methods>
           </class>
       </classes>
    </test>
</suite>

here it will execute just the method bthird test located in class Basicannotations
exclude elimantes all the methods u name , helps u actively run or not run a test case by xml


3.Package wise execution
you can run all the classes in one package using xml
e.g
<suite name="All Test Suite">
    <test verbose="2" preserve-order="true" name="TestNGBasicsBatch12">
    <packages>
        <package name="class02"></package>
    </packages>
    </test>
</suite>




Important points
1.you can not run duplicate classes in one test
<test verbose="2" preserve-order="true" name="test">
       <classes>
           <class name="class01.BasicAnnotations">
            <class name="class01.BasicAnnotations">
           </class>
       </classes>
    </test>
---->will not run it twice
2.in order to run a class mutiple times declare two test separatley
<test verbose="2" preserve-order="true" name="test">
       <classes>
           <class name="class01.BasicAnnotations">
       </classes>
    </test>
    <test verbose="2" preserve-order="true" name="test">
       <classes>
           <class name="class01.BasicAnnotations">
       </classes>
    </test>

--> will work



@BeforeClass:
this annotation is used to excute the method only once before the execution of the class

@AfterClass:
this annotation is used to excute the method only once after the execution of the class


@BeforeTest:
this annotation is used to excute the method only once before the execution of classes



@Aftertest:
this annotation is used to excute the method only once after the execution of classes



whenever we run by groups
the @beforeMethod and @after methods do not run
becuase they are not under the tag of groups


When we ran by method name
@before method and aftermethod runs


